// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: internal/app/grpcserver/proto/shorturl.proto

package grpcserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShortURLClient is the client API for ShortURL service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortURLClient interface {
	AddURL(ctx context.Context, in *AddURLRequest, opts ...grpc.CallOption) (*AddURLResponse, error)
	GetURL(ctx context.Context, in *GetURLRequest, opts ...grpc.CallOption) (*GetURLResponse, error)
	GetAllUserURL(ctx context.Context, in *GetAllUserURLRequest, opts ...grpc.CallOption) (*GetAllUserURLResponse, error)
	DeleteURL(ctx context.Context, in *DeleteURLRequest, opts ...grpc.CallOption) (*DeleteURLResponse, error)
	Stats(ctx context.Context, in *StatsURLRequest, opts ...grpc.CallOption) (*StatsURLResponse, error)
}

type shortURLClient struct {
	cc grpc.ClientConnInterface
}

func NewShortURLClient(cc grpc.ClientConnInterface) ShortURLClient {
	return &shortURLClient{cc}
}

func (c *shortURLClient) AddURL(ctx context.Context, in *AddURLRequest, opts ...grpc.CallOption) (*AddURLResponse, error) {
	out := new(AddURLResponse)
	err := c.cc.Invoke(ctx, "/shorturl.ShortURL/AddURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortURLClient) GetURL(ctx context.Context, in *GetURLRequest, opts ...grpc.CallOption) (*GetURLResponse, error) {
	out := new(GetURLResponse)
	err := c.cc.Invoke(ctx, "/shorturl.ShortURL/GetURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortURLClient) GetAllUserURL(ctx context.Context, in *GetAllUserURLRequest, opts ...grpc.CallOption) (*GetAllUserURLResponse, error) {
	out := new(GetAllUserURLResponse)
	err := c.cc.Invoke(ctx, "/shorturl.ShortURL/GetAllUserURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortURLClient) DeleteURL(ctx context.Context, in *DeleteURLRequest, opts ...grpc.CallOption) (*DeleteURLResponse, error) {
	out := new(DeleteURLResponse)
	err := c.cc.Invoke(ctx, "/shorturl.ShortURL/DeleteURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortURLClient) Stats(ctx context.Context, in *StatsURLRequest, opts ...grpc.CallOption) (*StatsURLResponse, error) {
	out := new(StatsURLResponse)
	err := c.cc.Invoke(ctx, "/shorturl.ShortURL/Stats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortURLServer is the server API for ShortURL service.
// All implementations must embed UnimplementedShortURLServer
// for forward compatibility
type ShortURLServer interface {
	AddURL(context.Context, *AddURLRequest) (*AddURLResponse, error)
	GetURL(context.Context, *GetURLRequest) (*GetURLResponse, error)
	GetAllUserURL(context.Context, *GetAllUserURLRequest) (*GetAllUserURLResponse, error)
	DeleteURL(context.Context, *DeleteURLRequest) (*DeleteURLResponse, error)
	Stats(context.Context, *StatsURLRequest) (*StatsURLResponse, error)
	mustEmbedUnimplementedShortURLServer()
}

// UnimplementedShortURLServer must be embedded to have forward compatible implementations.
type UnimplementedShortURLServer struct {
}

func (UnimplementedShortURLServer) AddURL(context.Context, *AddURLRequest) (*AddURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddURL not implemented")
}
func (UnimplementedShortURLServer) GetURL(context.Context, *GetURLRequest) (*GetURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetURL not implemented")
}
func (UnimplementedShortURLServer) GetAllUserURL(context.Context, *GetAllUserURLRequest) (*GetAllUserURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUserURL not implemented")
}
func (UnimplementedShortURLServer) DeleteURL(context.Context, *DeleteURLRequest) (*DeleteURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteURL not implemented")
}
func (UnimplementedShortURLServer) Stats(context.Context, *StatsURLRequest) (*StatsURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stats not implemented")
}
func (UnimplementedShortURLServer) mustEmbedUnimplementedShortURLServer() {}

// UnsafeShortURLServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortURLServer will
// result in compilation errors.
type UnsafeShortURLServer interface {
	mustEmbedUnimplementedShortURLServer()
}

func RegisterShortURLServer(s grpc.ServiceRegistrar, srv ShortURLServer) {
	s.RegisterService(&ShortURL_ServiceDesc, srv)
}

func _ShortURL_AddURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortURLServer).AddURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shorturl.ShortURL/AddURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortURLServer).AddURL(ctx, req.(*AddURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortURL_GetURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortURLServer).GetURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shorturl.ShortURL/GetURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortURLServer).GetURL(ctx, req.(*GetURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortURL_GetAllUserURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllUserURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortURLServer).GetAllUserURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shorturl.ShortURL/GetAllUserURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortURLServer).GetAllUserURL(ctx, req.(*GetAllUserURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortURL_DeleteURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortURLServer).DeleteURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shorturl.ShortURL/DeleteURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortURLServer).DeleteURL(ctx, req.(*DeleteURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortURL_Stats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatsURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortURLServer).Stats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shorturl.ShortURL/Stats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortURLServer).Stats(ctx, req.(*StatsURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShortURL_ServiceDesc is the grpc.ServiceDesc for ShortURL service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShortURL_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shorturl.ShortURL",
	HandlerType: (*ShortURLServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddURL",
			Handler:    _ShortURL_AddURL_Handler,
		},
		{
			MethodName: "GetURL",
			Handler:    _ShortURL_GetURL_Handler,
		},
		{
			MethodName: "GetAllUserURL",
			Handler:    _ShortURL_GetAllUserURL_Handler,
		},
		{
			MethodName: "DeleteURL",
			Handler:    _ShortURL_DeleteURL_Handler,
		},
		{
			MethodName: "Stats",
			Handler:    _ShortURL_Stats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/app/grpcserver/proto/shorturl.proto",
}
